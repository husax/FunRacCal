{"ast":null,"code":"class Fraccion {\n  constructor(num = 0, den = 1) {\n    if (Number.isInteger(num) && Number.isInteger(den)) {\n      this.n = Math.abs(num);\n      this.d = Math.abs(den);\n\n      if (num * den < 0) {\n        this.n *= -1;\n      }\n    } else {\n      this.n = 0;\n      this.d = 0;\n    }\n  }\n\n  static mcd(a, b) {\n    let c = a % b;\n\n    while (c !== 0) {\n      a = b;\n      b = c;\n      c = a % b;\n    }\n\n    return b;\n  }\n\n  static mcm(a, b) {\n    return a * b / Fraccion.mcd(a, b);\n  }\n\n  get isPositiv() {\n    return this.n > 0;\n  }\n\n  get isFraccion() {\n    return this.d !== 0;\n  }\n\n  get isEntero() {\n    return this.d === 1;\n  }\n\n  get isCero() {\n    return this.n === 0;\n  }\n\n  copia() {\n    return new Fraccion(this.n, this.d);\n  }\n\n  suma(q) {\n    let minComMul = Fraccion.mcm(this.d, q.d);\n    return new Fraccion(minComMul / this.d * this.n + minComMul / q.d * q.n, minComMul);\n  }\n\n  invAd() {\n    return new Fraccion(-this.n, this.d);\n  }\n\n  resta(q) {\n    return this.suma(q.invAd());\n  }\n\n  reduce() {\n    if (this.isFraccion) {\n      let maxcomdiv = Fraccion.mcd(Math.abs(this.n), this.d);\n      return new Fraccion(this.n / maxcomdiv, this.d / maxcomdiv);\n    } else {\n      return new Fraccion(1, 0); // se mantiene como no fracci√≥n\n    }\n  }\n\n  producto(q) {\n    if (this.n * q.n < Number.MAX_SAFE_INTEGER && this.d * q.d < Number.MAX_SAFE_INTEGER) {\n      return new Fraccion(this.n * q.n, this.d * q.d);\n    } else {\n      let fac1 = this.reduce();\n      let fac2 = q.reduce();\n\n      if (fac1.n * fac2.n < Number.MAX_SAFE_INTEGER && fac1.d * fac2.d < Number.MAX_SAFE_INTEGER) {\n        return new Fraccion(fac1.n * fac2.n, fac1.d * fac2.d);\n      } else {\n        let fac3 = new Fraccion(fac1.n, fac2.d).reduce();\n        let fac4 = new Fraccion(fac2.n, fac1.d).reduce();\n\n        if (fac3.n * fac4.n < Number.MAX_SAFE_INTEGER && fac3.d * fac4.d < Number.MAX_SAFE_INTEGER) {\n          return new Fraccion(fac3.n * fac4.n, fac3.d * fac4.d);\n        }\n      }\n    }\n  }\n\n  reciproco() {\n    return new Fraccion(this.d, this.n);\n  }\n\n  cociente(q) {\n    return this.producto(q.reciproco());\n  }\n\n  potencia(n) {\n    let prod = this.copia();\n\n    for (let i = 1; i < n; i++) {\n      prod = this.producto(prod);\n    }\n\n    return prod;\n  }\n\n  isIgual(q) {\n    return this.reduce().n === q.reduce().n && this.reduce().d === q.reduce().d;\n  }\n\n  toString() {\n    return this.n.toString() + \"/\" + this.d.toString();\n  }\n\n} ////////////////////\n\n\nclass Lineal extends Fraccion {\n  // recibe un termino de x\n  constructor(cx = new Fraccion(1), ti = new Fraccion(0)) {\n    super(ti.n, ti.d);\n    this.cx = cx; // this.ti = ti;\n\n    this.lineal = true;\n  }\n\n  get isLineal() {\n    return this.lineal;\n  }\n\n  get ti() {\n    return new Fraccion(this.n, this.d);\n  }\n\n  get isFraccion() {\n    return this.cx.n === 0;\n  }\n\n  suma(q) {\n    return new Lineal(this.cx.suma(q.cx), this.ti.suma(q.ti));\n  }\n\n  multiesc(a) {\n    return new Lineal(this.cx.producto(a).reduce(), this.ti.producto(a).reduce());\n  }\n\n  resta(q) {\n    return new Lineal(this.cx.resta(q.cx), this.ti.resta(q.ti));\n  }\n\n  isMultiplo(q) {\n    if (this.cx.n === 0 && q.cx.n === 0) {\n      return true;\n    } else if (this.cx.n * q.cx.n === 0) {\n      return false;\n    }\n\n    let tip = this.ti.cociente(this.cx);\n    let tiq = q.ti.cociente(q.cx);\n    return tip.isIgual(tiq);\n  }\n\n}\n\nclass Decimal extends Fraccion {\n  constructor(dec) {\n    if (typeof dec.valueOf() === \"string\" && dec !== \"\") {\n      let {\n        num: n,\n        den: d\n      } = Decimal.convierteAFrac(dec);\n      super(n, d);\n      this.dec = dec;\n    } else {\n      super(0, 0);\n      this.dec = \"\";\n    }\n  }\n\n  static convierteAFrac(decCad) {\n    let partes = decCad.split(\".\");\n    let ncad = partes[0] + partes[1];\n    let d = 1;\n\n    for (let i = 0; i < partes[1].length; i++) {\n      d *= 10;\n    }\n\n    return {\n      num: Number.parseInt(ncad),\n      den: d\n    };\n  }\n\n  get isDecimal() {\n    return this.dec !== \"\";\n  }\n\n  suma(d) {\n    if (d.isDecimal) {\n      let frac = super.suma(d);\n      let dec = (frac.n / frac.d).toString();\n      return new Decimal(dec);\n    }\n\n    return super.suma(d);\n  }\n\n  invAd() {\n    let cad = this.dec[0] === \"-\" ? this.dec.slice(1) : \"-\" + this.dec;\n    return new Decimal(cad);\n  }\n\n  resta(d) {\n    return this.suma(d.invAd());\n  }\n\n  producto(d) {\n    if (d.isDecimal) {\n      let frac = super.producto(d);\n      let dec = (frac.n / frac.d).toString();\n      return new Decimal(dec);\n    }\n\n    return super.producto(d);\n  }\n\n  cociente(d) {\n    if (d.isDecimal) {\n      let frac = super.cociente(d);\n      let dec = (frac.n / frac.d).toFixed(6); // esto es arbitrario\n\n      return new Decimal(dec);\n    }\n\n    return super.cociente(d);\n  }\n\n}\n\nexport { Fraccion, Lineal, Decimal };","map":{"version":3,"sources":["D:/repos/calcvisual/calcvisual-react-frontend/src/Fracciones.js"],"names":["Fraccion","constructor","num","den","Number","isInteger","n","Math","abs","d","mcd","a","b","c","mcm","isPositiv","isFraccion","isEntero","isCero","copia","suma","q","minComMul","invAd","resta","reduce","maxcomdiv","producto","MAX_SAFE_INTEGER","fac1","fac2","fac3","fac4","reciproco","cociente","potencia","prod","i","isIgual","toString","Lineal","cx","ti","lineal","isLineal","multiesc","isMultiplo","tip","tiq","Decimal","dec","valueOf","convierteAFrac","decCad","partes","split","ncad","length","parseInt","isDecimal","frac","cad","slice","toFixed"],"mappings":"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","sourcesContent":["class Fraccion {\r\n  constructor(num = 0, den = 1) {\r\n    if (Number.isInteger(num) && Number.isInteger(den)) {\r\n      this.n = Math.abs(num);\r\n      this.d = Math.abs(den);\r\n      if (num * den < 0) {\r\n        this.n *= -1;\r\n      }\r\n    } else {\r\n      this.n = 0;\r\n      this.d = 0;\r\n    }\r\n  }\r\n  static mcd(a, b) {\r\n    let c = a % b;\r\n    while (c !== 0) {\r\n      a = b;\r\n      b = c;\r\n      c = a % b;\r\n    }\r\n    return b;\r\n  }\r\n  static mcm(a, b) {\r\n    return (a * b) / Fraccion.mcd(a, b);\r\n  }\r\n\r\n  get isPositiv() {\r\n    return this.n > 0;\r\n  }\r\n  get isFraccion() {\r\n    return this.d !== 0;\r\n  }\r\n  get isEntero() {\r\n    return this.d === 1;\r\n  }\r\n\r\n  get isCero() {\r\n    return this.n === 0;\r\n  }\r\n\r\n  copia() {\r\n    return new Fraccion(this.n, this.d);\r\n  }\r\n  suma(q) {\r\n    let minComMul = Fraccion.mcm(this.d, q.d);\r\n    return new Fraccion(\r\n      (minComMul / this.d) * this.n + (minComMul / q.d) * q.n,\r\n      minComMul\r\n    );\r\n  }\r\n  invAd() {\r\n    return new Fraccion(-this.n, this.d);\r\n  }\r\n  resta(q) {\r\n    return this.suma(q.invAd());\r\n  }\r\n  reduce() {\r\n    if (this.isFraccion) {\r\n      let maxcomdiv = Fraccion.mcd(Math.abs(this.n), this.d);\r\n      return new Fraccion(this.n / maxcomdiv, this.d / maxcomdiv);\r\n    } else {\r\n      return new Fraccion(1, 0); // se mantiene como no fracci√≥n\r\n    }\r\n  }\r\n  producto(q) {\r\n    if (\r\n      this.n * q.n < Number.MAX_SAFE_INTEGER &&\r\n      this.d * q.d < Number.MAX_SAFE_INTEGER\r\n    ) {\r\n      return new Fraccion(this.n * q.n, this.d * q.d);\r\n    } else {\r\n      let fac1 = this.reduce();\r\n      let fac2 = q.reduce();\r\n      if (\r\n        fac1.n * fac2.n < Number.MAX_SAFE_INTEGER &&\r\n        fac1.d * fac2.d < Number.MAX_SAFE_INTEGER\r\n      ) {\r\n        return new Fraccion(fac1.n * fac2.n, fac1.d * fac2.d);\r\n      } else {\r\n        let fac3 = new Fraccion(fac1.n, fac2.d).reduce();\r\n        let fac4 = new Fraccion(fac2.n, fac1.d).reduce();\r\n        if (\r\n          fac3.n * fac4.n < Number.MAX_SAFE_INTEGER &&\r\n          fac3.d * fac4.d < Number.MAX_SAFE_INTEGER\r\n        ) {\r\n          return new Fraccion(fac3.n * fac4.n, fac3.d * fac4.d);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  reciproco() {\r\n    return new Fraccion(this.d, this.n);\r\n  }\r\n  cociente(q) {\r\n    return this.producto(q.reciproco());\r\n  }\r\n  potencia(n) {\r\n    let prod = this.copia();\r\n    for (let i = 1; i < n; i++) {\r\n      prod = this.producto(prod);\r\n    }\r\n    return prod;\r\n  }\r\n  isIgual(q) {\r\n    return this.reduce().n === q.reduce().n && this.reduce().d === q.reduce().d;\r\n  }\r\n  toString() {\r\n    return this.n.toString() + \"/\" + this.d.toString();\r\n  }\r\n}\r\n\r\n////////////////////\r\n\r\nclass Lineal extends Fraccion {\r\n  // recibe un termino de x\r\n  constructor(cx = new Fraccion(1), ti = new Fraccion(0)) {\r\n    super(ti.n, ti.d);\r\n    this.cx = cx;\r\n    // this.ti = ti;\r\n    this.lineal = true;\r\n  }\r\n\r\n  get isLineal() {\r\n    return this.lineal;\r\n  }\r\n\r\n  get ti() {\r\n    return new Fraccion(this.n, this.d);\r\n  }\r\n\r\n  get isFraccion() {\r\n    return this.cx.n === 0;\r\n  }\r\n\r\n  suma(q) {\r\n    return new Lineal(this.cx.suma(q.cx), this.ti.suma(q.ti));\r\n  }\r\n  multiesc(a) {\r\n    return new Lineal(\r\n      this.cx.producto(a).reduce(),\r\n      this.ti.producto(a).reduce()\r\n    );\r\n  }\r\n\r\n  resta(q) {\r\n    return new Lineal(this.cx.resta(q.cx), this.ti.resta(q.ti));\r\n  }\r\n  isMultiplo(q) {\r\n    if (this.cx.n === 0 && q.cx.n === 0) {\r\n      return true;\r\n    } else if (this.cx.n * q.cx.n === 0) {\r\n      return false;\r\n    }\r\n    let tip = this.ti.cociente(this.cx);\r\n    let tiq = q.ti.cociente(q.cx);\r\n    return tip.isIgual(tiq);\r\n  }\r\n}\r\n\r\nclass Decimal extends Fraccion {\r\n  constructor(dec) {\r\n    if (typeof dec.valueOf() === \"string\" && dec !== \"\") {\r\n      let { num: n, den: d } = Decimal.convierteAFrac(dec);\r\n      super(n, d);\r\n      this.dec = dec;\r\n    } else {\r\n      super(0, 0);\r\n      this.dec = \"\";\r\n    }\r\n  }\r\n\r\n  static convierteAFrac(decCad) {\r\n    let partes = decCad.split(\".\");\r\n    let ncad = partes[0] + partes[1];\r\n    let d = 1;\r\n    for (let i = 0; i < partes[1].length; i++) {\r\n      d *= 10;\r\n    }\r\n    return { num: Number.parseInt(ncad), den: d };\r\n  }\r\n\r\n  get isDecimal() {\r\n    return this.dec !== \"\";\r\n  }\r\n\r\n  suma(d) {\r\n    if (d.isDecimal) {\r\n      let frac = super.suma(d);\r\n      let dec = (frac.n / frac.d).toString();\r\n      return new Decimal(dec);\r\n    }\r\n    return super.suma(d);\r\n  }\r\n\r\n  invAd() {\r\n    let cad = this.dec[0] === \"-\" ? this.dec.slice(1) : \"-\" + this.dec;\r\n    return new Decimal(cad);\r\n  }\r\n\r\n  resta(d) {\r\n    return this.suma(d.invAd());\r\n  }\r\n\r\n  producto(d) {\r\n    if (d.isDecimal) {\r\n      let frac = super.producto(d);\r\n      let dec = (frac.n / frac.d).toString();\r\n      return new Decimal(dec);\r\n    }\r\n    return super.producto(d);\r\n  }\r\n\r\n  cociente(d) {\r\n    if (d.isDecimal) {\r\n      let frac = super.cociente(d);\r\n      let dec = (frac.n / frac.d).toFixed(6); // esto es arbitrario\r\n      return new Decimal(dec);\r\n    }\r\n    return super.cociente(d);\r\n  }\r\n}\r\n\r\nexport { Fraccion, Lineal, Decimal };\r\n"]},"metadata":{},"sourceType":"module"}