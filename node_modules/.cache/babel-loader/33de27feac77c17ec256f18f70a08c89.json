{"ast":null,"code":"function ACadenaSinCeros(n, dig) {\n  let d = Math.floor(dig);\n\n  if (Number.isInteger(n)) {\n    return n.toString();\n  }\n\n  let cad = n.toFixed(d);\n\n  while (cad[cad.length - 1] === \"0\") {\n    cad = cad.slice(0, cad.length - 1);\n  }\n\n  if (cad[cad.length - 1] === \".\") {\n    cad = cad.slice(0, cad.length - 1);\n  }\n\n  return cad;\n}\n\nclass Polinomio {\n  constructor(arr, v = \"x\") {\n    this._var = v;\n    this._raices = [];\n    let gr = arr.length - 1;\n\n    while (arr[gr] === 0) {\n      gr--;\n    }\n\n    if (gr < 0) {\n      this.coefs = [0];\n    } else {\n      this.coefs = arr.slice(0, ++gr);\n    }\n  } // propiedades no modificables\n\n\n  get grado() {\n    return this.coefs.length - 1;\n  }\n\n  get variable() {\n    return this._var;\n  }\n\n  set variable(v) {\n    this._var = v;\n  }\n\n  get esMonico() {\n    return this.coefs[this.grado] === 1 ? true : false;\n  }\n\n  get esPolinomio() {\n    return true;\n  }\n\n  get esConstante() {\n    return this.grado === 0;\n  } // metodo estatico para construir un polinomio con un solo dato\n  // crea un polinomio con un único término\n  // el monomio ai*x^ind\n\n\n  static Monomio(ai, ind, v = \"x\") {\n    let pot = Math.floor(ind);\n    let mon = new Array(pot + 1);\n    mon.fill(0);\n    mon[pot] = ai;\n    return new Polinomio(mon, v);\n  } // suma del polinomio que llama con otro polinomio q\n\n\n  Suma(q) {\n    if (this.grado >= q.grado) {\n      let s = this.coefs.slice(0);\n\n      for (let i = 0; i < q.coefs.length; i++) {\n        s[i] += q.coefs[i];\n      }\n\n      return new Polinomio(s, this.variable);\n    } else {\n      let s = q.coefs.slice(0);\n\n      for (let i = 0; i < this.coefs.length; i++) {\n        s[i] += this.coefs[i];\n      }\n\n      return new Polinomio(s, this.variable);\n    }\n  }\n\n  Producto(q) {\n    let s = new Array(this.grado + q.grado + 1);\n    s.fill(0);\n\n    for (let i = 0; i <= this.grado; i++) {\n      for (let j = 0; j <= q.grado; j++) {\n        s[i + j] += this.coefs[i] * q.coefs[j];\n      }\n    }\n\n    return new Polinomio(s, this.variable);\n  }\n\n  ProductoPorN(n) {\n    let s = this.coefs.slice(0);\n\n    for (let i = 0; i < s.length; i++) {\n      s[i] *= n;\n    }\n\n    return new Polinomio(s, this.variable);\n  }\n\n  InversoAd() {\n    let s = this.coefs.slice(0);\n\n    for (let i = 0; i < s.length; i++) {\n      s[i] *= -1;\n    }\n\n    return new Polinomio(s, this.variable);\n  }\n\n  Resta(q) {\n    return this.Suma(q.InversoAd());\n  }\n\n  Copia() {\n    return new Polinomio(this.coefs, this.variable);\n  }\n\n  Potencia(n) {\n    let s = this.Copia();\n\n    if (Number.isInteger(n)) {\n      for (let i = 1; i < n; i++) {\n        s = s.Producto(this);\n      }\n\n      return s;\n    } else {\n      return s;\n    }\n  }\n\n  Cociente(q) {\n    if (this.grado < q.grado) {\n      return new Polinomio([0], this.variable);\n    } else {\n      let r = this.Copia();\n      let grs = r.grado - q.grado;\n      let coc = Polinomio.Monomio(r.coefs[r.grado] / q.coefs[q.grado], grs, r.variable);\n      r = r.Resta(coc.Producto(q));\n      return coc.Suma(r.Cociente(q));\n    }\n  }\n\n  Residuo(q) {\n    if (this.grado < q.grado) {\n      return this.Copia(); // en este caso el residuo es el dividendo\n    } else {\n      let r = this.Copia();\n      let grs = r.grado - q.grado;\n      let cm = Polinomio.Monomio(r.coefs[r.grado] / q.coefs[q.grado], grs);\n      r = r.Resta(cm.Producto(q));\n      return r.Residuo(q);\n    }\n  }\n\n  Evalua(x) {\n    let pdeX = 0;\n\n    for (let i = this.grado; i >= 0; i--) {\n      pdeX = pdeX * x + this.coefs[i];\n    }\n\n    return pdeX;\n  }\n\n  toString() {\n    let cad = \"\";\n    let signo = \"\";\n    let c;\n\n    for (let i = this.grado; i >= 0; i--) {\n      c = this.coefs[i];\n\n      if (c !== 0) {\n        signo = c > 0 ? \"+\" : \"-\";\n        c = Math.abs(c);\n        cad += signo;\n\n        if (i === 0) {\n          cad += ACadenaSinCeros(c, 4);\n        } else {\n          cad += c === 1 ? this.variable : ACadenaSinCeros(c, 5) + \"*\" + this.variable;\n          cad += i > 1 ? \"**\" + i.toString() : \"\";\n        }\n      }\n    }\n\n    if (cad === \"\") {\n      cad = \"0\";\n    } else if (cad[0] === \"+\") {\n      cad = cad.slice(1);\n    }\n\n    return cad;\n  }\n\n  Derivada() {\n    let dif = [];\n\n    for (let i = 0; i < this.grado; i++) {\n      dif[i] = (i + 1) * this.coefs[i + 1];\n    }\n\n    return new Polinomio(dif, this.variable);\n  }\n\n}\n\nclass FunRacional extends Polinomio {\n  constructor(nP, dP = Polinomio.Monomio(1, 0)) {\n    super(nP.coefs, nP.variable);\n    this.denomP = dP.Copia();\n    this.denomP.variable = this.variable;\n  }\n\n  get numP() {\n    return super.Copia();\n  }\n\n  get esPolinomio() {\n    return this.denomP.esConstante && this.denomP.esMonico;\n  }\n\n  Suma(r) {\n    let denc = this.denomP.Producto(r.denomP);\n    let num = this.numP.Producto(r.denomP);\n    return new FunRacional(num.Suma(r.numP.Producto(this.denomP)), denc);\n  }\n\n  Producto(r) {\n    return new FunRacional(this.numP.Producto(r.numP), this.denomP.Producto(r.denomP));\n  }\n\n  ProductoPorN(n) {\n    return new FunRacional(this.numP.ProductoPorN(n), this.denomP);\n  }\n\n  Cociente(r) {\n    return new FunRacional(this.numP.Producto(r.denomP), this.denomP.Producto(r.numP));\n  }\n\n  Potencia(n) {\n    return new FunRacional(this.numP.Potencia(n), this.denomP.Potencia(n));\n  }\n\n  Evalua(x) {\n    //let num= this.numP.Evalua(x);\n    //let denom= this.denomP.Evalua(x);\n    //if (num === 0 && denom === 0) {\n    //  let numP= this.numP.Cociente(new Polinomio([num, 1]));\n    //  let denomP= this.denomP.Cociente(new Polinomio([denom, 1]));\n    //  return new FunRacional(numP, denomP).Evalua(x);\n    //}\n    return this.numP.Evalua(x) / this.denomP.Evalua(x);\n  }\n\n  toString() {\n    if (this.esPolinomio) {\n      return this.numP.toString();\n    }\n\n    return this.numP.toString() + \"/\" + this.denomP.toString();\n  }\n\n}\n\nexport { ACadenaSinCeros, FunRacional };\nexport default Polinomio;","map":{"version":3,"sources":["D:/repos/calcvisual/calcvisual-react-frontend/src/Polinomio.js"],"names":["ACadenaSinCeros","n","dig","d","Math","floor","Number","isInteger","toString","cad","toFixed","length","slice","Polinomio","constructor","arr","v","_var","_raices","gr","coefs","grado","variable","esMonico","esPolinomio","esConstante","Monomio","ai","ind","pot","mon","Array","fill","Suma","q","s","i","Producto","j","ProductoPorN","InversoAd","Resta","Copia","Potencia","Cociente","r","grs","coc","Residuo","cm","Evalua","x","pdeX","signo","c","abs","Derivada","dif","FunRacional","nP","dP","denomP","numP","denc","num"],"mappings":"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","sourcesContent":["function ACadenaSinCeros(n, dig) {\r\n    let d = Math.floor(dig);\r\n    if (Number.isInteger(n)) {\r\n        return n.toString();\r\n    }\r\n    let cad = n.toFixed(d);\r\n    while (cad[cad.length - 1] === \"0\") {\r\n        cad = cad.slice(0, cad.length - 1);\r\n    }\r\n    if (cad[cad.length - 1] === \".\") {\r\n        cad = cad.slice(0, cad.length - 1);\r\n    }\r\n    return cad;\r\n}\r\nclass Polinomio {\r\n    constructor(arr, v = \"x\") {\r\n        this._var = v;\r\n        this._raices = [];\r\n        let gr = arr.length - 1;\r\n        while (arr[gr] === 0) {\r\n            gr--;\r\n        }\r\n        if (gr < 0) {\r\n            this.coefs = [0];\r\n        }\r\n        else {\r\n            this.coefs = arr.slice(0, ++gr);\r\n        }\r\n    }\r\n    // propiedades no modificables\r\n    get grado() {\r\n        return this.coefs.length - 1;\r\n    }\r\n    get variable() {\r\n        return this._var;\r\n    }\r\n    set variable(v) {\r\n        this._var = v;\r\n    }\r\n    get esMonico() {\r\n        return this.coefs[this.grado] === 1 ? true : false;\r\n    }\r\n    get esPolinomio() {\r\n        return true;\r\n    }\r\n    get esConstante() {\r\n        return this.grado === 0;\r\n    }\r\n    // metodo estatico para construir un polinomio con un solo dato\r\n    // crea un polinomio con un único término\r\n    // el monomio ai*x^ind\r\n    static Monomio(ai, ind, v = \"x\") {\r\n        let pot = Math.floor(ind);\r\n        let mon = new Array(pot + 1);\r\n        mon.fill(0);\r\n        mon[pot] = ai;\r\n        return new Polinomio(mon, v);\r\n    }\r\n    // suma del polinomio que llama con otro polinomio q\r\n    Suma(q) {\r\n        if (this.grado >= q.grado) {\r\n            let s = this.coefs.slice(0);\r\n            for (let i = 0; i < q.coefs.length; i++) {\r\n                s[i] += q.coefs[i];\r\n            }\r\n            return new Polinomio(s, this.variable);\r\n        }\r\n        else {\r\n            let s = q.coefs.slice(0);\r\n            for (let i = 0; i < this.coefs.length; i++) {\r\n                s[i] += this.coefs[i];\r\n            }\r\n            return new Polinomio(s, this.variable);\r\n        }\r\n    }\r\n    Producto(q) {\r\n        let s = new Array(this.grado + q.grado + 1);\r\n        s.fill(0);\r\n        for (let i = 0; i <= this.grado; i++) {\r\n            for (let j = 0; j <= q.grado; j++) {\r\n                s[i + j] += this.coefs[i] * q.coefs[j];\r\n            }\r\n        }\r\n        return new Polinomio(s, this.variable);\r\n    }\r\n    ProductoPorN(n) {\r\n        let s = this.coefs.slice(0);\r\n        for (let i = 0; i < s.length; i++) {\r\n            s[i] *= n;\r\n        }\r\n        return new Polinomio(s, this.variable);\r\n    }\r\n    InversoAd() {\r\n        let s = this.coefs.slice(0);\r\n        for (let i = 0; i < s.length; i++) {\r\n            s[i] *= -1;\r\n        }\r\n        return new Polinomio(s, this.variable);\r\n    }\r\n    Resta(q) {\r\n        return this.Suma(q.InversoAd());\r\n    }\r\n    Copia() {\r\n        return new Polinomio(this.coefs, this.variable);\r\n    }\r\n    Potencia(n) {\r\n        let s = this.Copia();\r\n        if (Number.isInteger(n)) {\r\n            for (let i = 1; i < n; i++) {\r\n                s = s.Producto(this);\r\n            }\r\n            return s;\r\n        }\r\n        else {\r\n            return s;\r\n        }\r\n    }\r\n    Cociente(q) {\r\n        if (this.grado < q.grado) {\r\n            return new Polinomio([0], this.variable);\r\n        }\r\n        else {\r\n            let r = this.Copia();\r\n            let grs = r.grado - q.grado;\r\n            let coc = Polinomio.Monomio(r.coefs[r.grado] / q.coefs[q.grado], grs, r.variable);\r\n            r = r.Resta(coc.Producto(q));\r\n            return coc.Suma(r.Cociente(q));\r\n        }\r\n    }\r\n    Residuo(q) {\r\n        if (this.grado < q.grado) {\r\n            return this.Copia(); // en este caso el residuo es el dividendo\r\n        }\r\n        else {\r\n            let r = this.Copia();\r\n            let grs = r.grado - q.grado;\r\n            let cm = Polinomio.Monomio(r.coefs[r.grado] / q.coefs[q.grado], grs);\r\n            r = r.Resta(cm.Producto(q));\r\n            return r.Residuo(q);\r\n        }\r\n    }\r\n    Evalua(x) {\r\n        let pdeX = 0;\r\n        for (let i = this.grado; i >= 0; i--) {\r\n            pdeX = pdeX * x + this.coefs[i];\r\n        }\r\n        return pdeX;\r\n    }\r\n    toString() {\r\n        let cad = \"\";\r\n        let signo = \"\";\r\n        let c;\r\n        for (let i = this.grado; i >= 0; i--) {\r\n            c = this.coefs[i];\r\n            if (c !== 0) {\r\n                signo = c > 0 ? \"+\" : \"-\";\r\n                c = Math.abs(c);\r\n                cad += signo;\r\n                if (i === 0) {\r\n                    cad += ACadenaSinCeros(c, 4);\r\n                }\r\n                else {\r\n                    cad += c === 1 ? this.variable : ACadenaSinCeros(c, 5) + \"*\" + this.variable;\r\n                    cad += i > 1 ? \"**\" + i.toString() : \"\";\r\n                }\r\n            }\r\n        }\r\n        if (cad === \"\") {\r\n            cad = \"0\";\r\n        }\r\n        else if (cad[0] === \"+\") {\r\n            cad = cad.slice(1);\r\n        }\r\n        return cad;\r\n    }\r\n    Derivada() {\r\n        let dif = [];\r\n        for (let i = 0; i < this.grado; i++) {\r\n            dif[i] = (i + 1) * this.coefs[i + 1];\r\n        }\r\n        return new Polinomio(dif, this.variable);\r\n    }\r\n}\r\nclass FunRacional extends Polinomio {\r\n    constructor(nP, dP = Polinomio.Monomio(1, 0)) {\r\n        super(nP.coefs, nP.variable);\r\n        this.denomP = dP.Copia();\r\n        this.denomP.variable = this.variable;\r\n    }\r\n    get numP() {\r\n        return super.Copia();\r\n    }\r\n    get esPolinomio() {\r\n        return this.denomP.esConstante && this.denomP.esMonico;\r\n    }\r\n    Suma(r) {\r\n        let denc = this.denomP.Producto(r.denomP);\r\n        let num = this.numP.Producto(r.denomP);\r\n        return new FunRacional(num.Suma(r.numP.Producto(this.denomP)), denc);\r\n    }\r\n    Producto(r) {\r\n        return new FunRacional(this.numP.Producto(r.numP), this.denomP.Producto(r.denomP));\r\n    }\r\n    ProductoPorN(n) {\r\n        return new FunRacional(this.numP.ProductoPorN(n), this.denomP);\r\n    }\r\n    Cociente(r) {\r\n        return new FunRacional(this.numP.Producto(r.denomP), this.denomP.Producto(r.numP));\r\n    }\r\n    Potencia(n) {\r\n        return new FunRacional(this.numP.Potencia(n), this.denomP.Potencia(n));\r\n    }\r\n    Evalua(x) {\r\n        //let num= this.numP.Evalua(x);\r\n        //let denom= this.denomP.Evalua(x);\r\n        //if (num === 0 && denom === 0) {\r\n        //  let numP= this.numP.Cociente(new Polinomio([num, 1]));\r\n        //  let denomP= this.denomP.Cociente(new Polinomio([denom, 1]));\r\n        //  return new FunRacional(numP, denomP).Evalua(x);\r\n        //}\r\n        return this.numP.Evalua(x) / this.denomP.Evalua(x);\r\n    }\r\n    toString() {\r\n        if (this.esPolinomio) {\r\n            return this.numP.toString();\r\n        }\r\n        return this.numP.toString() + \"/\" + this.denomP.toString();\r\n    }\r\n}\r\nexport { ACadenaSinCeros, FunRacional };\r\nexport default Polinomio;\r\n"]},"metadata":{},"sourceType":"module"}