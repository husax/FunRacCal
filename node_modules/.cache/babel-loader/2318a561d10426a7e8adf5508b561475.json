{"ast":null,"code":"/*\r\n  Convierte una cadena laTeX algebaica simple a lineal\r\ncon la notación de Python.\r\nEn Python el símbolo de exponenciación es ** en lugar de ^\r\nel resto de los operadores son aritmeticos son +, -, *, /\r\nDeja los nombres de las funciones en la forma estandar : sqrt, sin, cos, etc.\r\n */\nclass TeXToLinealPyt {\n  static fracToDiag(cad) {\n    let cadPyt = cad.replace(/}{/g, \"}/{\");\n    return cadPyt.replace(/\\\\frac/g, \"\");\n  }\n\n  static llavesAParen(cad) {\n    let cadPyt = cad.replace(/{/g, \"(\");\n    return cadPyt.replace(/}/g, \")\");\n  }\n\n  static puntoPorAster(cad) {\n    return cad.replace(/\\\\cdot/g, \"*\");\n  }\n\n  static quitaEtiqParen(cad) {\n    return cad.replace(/\\\\left|\\\\right/g, \"\");\n  }\n\n  static insertaAster(cad) {\n    const re = /[0-9.a-z][(x]|\\)[0-9.a-z(]|[0-9.a-z]\\[/gi;\n    return cad.replace(re, cadena => cadena[0] + \"*\" + cadena[1]);\n  }\n\n  static bloqueaFun(cad) {\n    const re = /\\\\sqrt|\\\\sin|\\\\cos|\\\\tan|\\\\ctg|\\\\sec/g;\n    return cad.replace(re, cadena => \"[\" + cadena.substring(1) + \"]\");\n  }\n\n  static quitaBloq(cad) {\n    return cad.replace(/[[\\]]/g, \"\");\n  }\n\n  static signoPot(cad) {\n    return cad.replace(/\\^/g, \"**\");\n  }\n\n  static quitaSpace(cad) {\n    return cad.replace(/ /g, \"\");\n  }\n\n  static TexToPyt(cad) {\n    let cadpyt = TeXToLinealPyt.fracToDiag(cad);\n    cadpyt = TeXToLinealPyt.llavesAParen(cadpyt);\n    cadpyt = TeXToLinealPyt - quitaEtiqParen(cadpyt);\n    cadpyt = TeXToLinealPyt.puntoPorAster(cadpyt);\n    cadpyt = TeXToLinealPyt - bloqueaFun(cadpyt);\n    cadpyt = TeXToLinealPyt.insertaAster(cadpyt);\n    cadpyt = TeXToLinealPyt.insertaAster(cadpyt); // requiere doble paso para casos como )x(\n\n    cadpyt = TeXToLinealPyt.quitaBloq(cadpyt);\n    cadpyt = TeXToLinealPyt.signoPot(cadpyt);\n    cadpyt = TeXToLinealPyt.quitaSpace(cadpyt);\n    return cadpyt;\n  }\n\n}\n\nexport default TeXToLinealPyt;","map":{"version":3,"sources":["C:/Users/husax/OneDrive - CINVESTAV/proyectos visual studio code/CreaReactApp/my-app/src/TeXToLineal.js"],"names":["TeXToLinealPyt","fracToDiag","cad","cadPyt","replace","llavesAParen","puntoPorAster","quitaEtiqParen","insertaAster","re","cadena","bloqueaFun","substring","quitaBloq","signoPot","quitaSpace","TexToPyt","cadpyt"],"mappings":"AAAA;;;;;;;AAOA,MAAMA,cAAN,CAAqB;AACnB,SAAOC,UAAP,CAAkBC,GAAlB,EAAuB;AACrB,QAAIC,MAAM,GAAGD,GAAG,CAACE,OAAJ,CAAY,KAAZ,EAAmB,KAAnB,CAAb;AACA,WAAOD,MAAM,CAACC,OAAP,CAAe,SAAf,EAA0B,EAA1B,CAAP;AACD;;AAED,SAAOC,YAAP,CAAoBH,GAApB,EAAyB;AACvB,QAAIC,MAAM,GAAGD,GAAG,CAACE,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,CAAb;AACA,WAAOD,MAAM,CAACC,OAAP,CAAe,IAAf,EAAqB,GAArB,CAAP;AACD;;AAED,SAAOE,aAAP,CAAqBJ,GAArB,EAA0B;AACxB,WAAOA,GAAG,CAACE,OAAJ,CAAY,SAAZ,EAAuB,GAAvB,CAAP;AACD;;AAED,SAAOG,cAAP,CAAsBL,GAAtB,EAA2B;AACzB,WAAOA,GAAG,CAACE,OAAJ,CAAY,iBAAZ,EAA+B,EAA/B,CAAP;AACD;;AAED,SAAOI,YAAP,CAAoBN,GAApB,EAAyB;AACvB,UAAMO,EAAE,GAAG,0CAAX;AACA,WAAOP,GAAG,CAACE,OAAJ,CAAYK,EAAZ,EAAiBC,MAAD,IAAYA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ,GAAkBA,MAAM,CAAC,CAAD,CAApD,CAAP;AACD;;AAED,SAAOC,UAAP,CAAkBT,GAAlB,EAAuB;AACrB,UAAMO,EAAE,GAAG,uCAAX;AACA,WAAOP,GAAG,CAACE,OAAJ,CAAYK,EAAZ,EAAiBC,MAAD,IAAY,MAAMA,MAAM,CAACE,SAAP,CAAiB,CAAjB,CAAN,GAA4B,GAAxD,CAAP;AACD;;AAED,SAAOC,SAAP,CAAiBX,GAAjB,EAAsB;AACpB,WAAOA,GAAG,CAACE,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,CAAP;AACD;;AAED,SAAOU,QAAP,CAAgBZ,GAAhB,EAAqB;AACnB,WAAOA,GAAG,CAACE,OAAJ,CAAY,KAAZ,EAAmB,IAAnB,CAAP;AACD;;AAED,SAAOW,UAAP,CAAkBb,GAAlB,EAAuB;AACrB,WAAOA,GAAG,CAACE,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAP;AACD;;AAED,SAAOY,QAAP,CAAgBd,GAAhB,EAAqB;AACnB,QAAIe,MAAM,GAAGjB,cAAc,CAACC,UAAf,CAA0BC,GAA1B,CAAb;AACAe,IAAAA,MAAM,GAAGjB,cAAc,CAACK,YAAf,CAA4BY,MAA5B,CAAT;AACAA,IAAAA,MAAM,GAAGjB,cAAc,GAAGO,cAAc,CAACU,MAAD,CAAxC;AACAA,IAAAA,MAAM,GAAGjB,cAAc,CAACM,aAAf,CAA6BW,MAA7B,CAAT;AACAA,IAAAA,MAAM,GAAGjB,cAAc,GAAGW,UAAU,CAACM,MAAD,CAApC;AACAA,IAAAA,MAAM,GAAGjB,cAAc,CAACQ,YAAf,CAA4BS,MAA5B,CAAT;AACAA,IAAAA,MAAM,GAAGjB,cAAc,CAACQ,YAAf,CAA4BS,MAA5B,CAAT,CAPmB,CAO2B;;AAC9CA,IAAAA,MAAM,GAAGjB,cAAc,CAACa,SAAf,CAAyBI,MAAzB,CAAT;AACAA,IAAAA,MAAM,GAAGjB,cAAc,CAACc,QAAf,CAAwBG,MAAxB,CAAT;AACAA,IAAAA,MAAM,GAAGjB,cAAc,CAACe,UAAf,CAA0BE,MAA1B,CAAT;AACA,WAAOA,MAAP;AACD;;AArDkB;;AAwDrB,eAAejB,cAAf","sourcesContent":["/*\r\n  Convierte una cadena laTeX algebaica simple a lineal\r\ncon la notación de Python.\r\nEn Python el símbolo de exponenciación es ** en lugar de ^\r\nel resto de los operadores son aritmeticos son +, -, *, /\r\nDeja los nombres de las funciones en la forma estandar : sqrt, sin, cos, etc.\r\n */\r\nclass TeXToLinealPyt {\r\n  static fracToDiag(cad) {\r\n    let cadPyt = cad.replace(/}{/g, \"}/{\");\r\n    return cadPyt.replace(/\\\\frac/g, \"\");\r\n  }\r\n\r\n  static llavesAParen(cad) {\r\n    let cadPyt = cad.replace(/{/g, \"(\");\r\n    return cadPyt.replace(/}/g, \")\");\r\n  }\r\n\r\n  static puntoPorAster(cad) {\r\n    return cad.replace(/\\\\cdot/g, \"*\");\r\n  }\r\n\r\n  static quitaEtiqParen(cad) {\r\n    return cad.replace(/\\\\left|\\\\right/g, \"\");\r\n  }\r\n\r\n  static insertaAster(cad) {\r\n    const re = /[0-9.a-z][(x]|\\)[0-9.a-z(]|[0-9.a-z]\\[/gi;\r\n    return cad.replace(re, (cadena) => cadena[0] + \"*\" + cadena[1]);\r\n  }\r\n\r\n  static bloqueaFun(cad) {\r\n    const re = /\\\\sqrt|\\\\sin|\\\\cos|\\\\tan|\\\\ctg|\\\\sec/g;\r\n    return cad.replace(re, (cadena) => \"[\" + cadena.substring(1) + \"]\");\r\n  }\r\n\r\n  static quitaBloq(cad) {\r\n    return cad.replace(/[[\\]]/g, \"\");\r\n  }\r\n\r\n  static signoPot(cad) {\r\n    return cad.replace(/\\^/g, \"**\");\r\n  }\r\n\r\n  static quitaSpace(cad) {\r\n    return cad.replace(/ /g, \"\");\r\n  }\r\n\r\n  static TexToPyt(cad) {\r\n    let cadpyt = TeXToLinealPyt.fracToDiag(cad);\r\n    cadpyt = TeXToLinealPyt.llavesAParen(cadpyt);\r\n    cadpyt = TeXToLinealPyt - quitaEtiqParen(cadpyt);\r\n    cadpyt = TeXToLinealPyt.puntoPorAster(cadpyt);\r\n    cadpyt = TeXToLinealPyt - bloqueaFun(cadpyt);\r\n    cadpyt = TeXToLinealPyt.insertaAster(cadpyt);\r\n    cadpyt = TeXToLinealPyt.insertaAster(cadpyt); // requiere doble paso para casos como )x(\r\n    cadpyt = TeXToLinealPyt.quitaBloq(cadpyt);\r\n    cadpyt = TeXToLinealPyt.signoPot(cadpyt);\r\n    cadpyt = TeXToLinealPyt.quitaSpace(cadpyt);\r\n    return cadpyt;\r\n  }\r\n}\r\n\r\nexport default TeXToLinealPyt;\r\n"]},"metadata":{},"sourceType":"module"}